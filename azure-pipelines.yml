# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

# welcome to yaml pipeline
name: $(SourceBranchName)_$(date:yyyyMMdd)$(rev:.r) 

trigger:
  branches: 
    include: 
    - dev
    - master
    - feature*
  paths:
    exclude:
    - Readme.md
    - docs/


pr:
- master
- dev

stages:
- stage: "Build"
  jobs:
  - job: "BuildJob"
    pool:
      vmimage: "windows-latest"

    variables:
        buildConfiguration: "Release"

    steps:
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        feedsToUse: 'select'
    
    - task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
      displayName: 'Prepare analysis on SonarCloud'
      inputs:
        SonarCloud: 'SoncarCloud '
        organization: 'ayomide-dev-prod-qa'
        projectKey: 'HelloWorld-dotnet-project--yaml'
        extraProperties: |
        # Additional properties that will be passed to the scanner, 
        # Put one key=value per line, example:
        # sonar.exclusions=**/*.bin
    
    
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(BuildConfiguration)'
    
    
    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: test
        projects: '**/*[Tt]ests/*.csproj'
        arguments: '--no-build --configuration $(buildConfiguration) --collect "Code Coverage"  /p:threshold=8 /p:thresholdType=line /p:thresholdStat=total /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./TestResults/Coverage/'
        publishTestResults: true
    

    # - task: DotNetCoreCLI@2
    #   displayName: 'Run unit tests - $(buildConfiguration)'
    #   inputs:
    #     command: 'test'
    #     arguments: '--no-build --configuration $(BuildConfiguration) --collect "Code Coverage"  /p:threshold=8 /p:thresholdType=line /p:thresholdStat=total /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./TestResults/Coverage/'
    #     publishTestResults: true
    #     projects: '**/*Tests.csproj'
       
       
    - task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
      displayName: 'Run Code Analysis'
    
    #Your build pipeline references an undefined variable named ‘Pipeline.Workspace’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
     
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: '$(Pipeline.Workspace)/**/coverage.cobertura.xml'
      condition: 'succeededOrFailed()'

    - task: SonarSource.sonarcloud.38b27399-a642-40af-bb7d-9971f69712e8.SonarCloudPublish@1
      displayName: 'Publish Quality Gate Result'

    - task: whitesource.whiteSource-bolt-v2.bolt.wss.WhiteSource@21
      displayName: WhiteSource


    - task: DotNetCoreCLI@2
      inputs:
      displayName: 'Publish Artifacts'
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(build.ArtifactStagingDirectory)'

    # - template: Template/buildandrestore.yaml
    #   parameters:
    #     buildConfiguration: 'Debug'

    #   - template: Template/buildandrestore.yaml
    #     parameters: 
    #       buildConfiguration: 'Release'

    # - task: PublishBuildArtifacts@1
    #   inputs:
    #     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    #     ArtifactName: 'drop'
    #     publishLocation: 'Container'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(build.ArtifactStagingDirectory)'
        artifact: 'drop'
        publishLocation: 'pipeline'

- stage: "DeploytoFeature"
  dependsOn: "Build"
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/feature')
  jobs:
  - deployment:
    pool:
      vmimage: "windows-latest"
    environment: 'Feature'
    strategy:
      runOnce:
        deploy:
          steps:
          # - task: DownloadPipelineArtifact@2
          #   inputs:
          #     buildType: 'current'
          #     artifactName: 'drop.Release'
          #     targetPath: '$(Pipeline.Workspace)'
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure-devops-demo'
              appType: 'webApp'
              WebAppName: 'web-app-stage'
              packageForLinux: '$(Pipeline.Workspace)/**/*.zip'
          - task: ShaykiAbramczyk.CreatePullRequest.CreatePullRequest.CreatePullRequest@1
            displayName: 'Create Pull Request'
            inputs:
              repoType: GitHub
              githubEndpoint: 'GitHub connection 2'
              githubRepository: 'LBCIT-Terraform-scripts/HelloWorld-dotnet-project--yaml'
              targetBranch: dev
              title: 'Merge $(Build.SourceBranch) to dev'
              reviewers: 'ayomide@lbcit.ca'

- stage: "DeploytoDev"
  dependsOn: "Build"
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/dev')
  jobs:
  - deployment:
    pool:
      vmimage: "windows-latest"
    environment: 'Development'
    strategy:
      runOnce:
        deploy:
          steps:

          ################
          # NOT NEEDED IN ENVIRONMENT DEPLOYMENT
          ###############
          # - task: DownloadPipelineArtifact@2
          #   inputs:
          #     buildType: 'current'
          #     targetPath: '$(Pipeline.Workspace)'
              
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure-devops-demo'
              appType: 'webApp'
              WebAppName: 'dev-web-app-1-1'
              packageForLinux: '$(Pipeline.Workspace)/**/*.zip'

          - task: ShaykiAbramczyk.CreatePullRequest.CreatePullRequest.CreatePullRequest@1
            displayName: 'Create Pull Request'
            inputs:
              repoType: GitHub
              githubEndpoint: 'GitHub connection 2'
              githubRepository: 'LBCIT-Terraform-scripts/HelloWorld-dotnet-project--yaml'
              targetBranch: master
              title: 'Merge $(Build.SourceBranch) to Master'
              reviewers: 'ayomide@lbcit.ca'



- stage: "DeploytoProd"
  dependsOn: "Build"
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/prod')
  jobs:
  - deployment:
    pool:
      vmimage: "ubuntu-latest"
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          # - task: DownloadPipelineArtifact@2
          #   inputs:
          #     buildType: 'current'
          #     artifactName: 'drop.Release'
          #     targetPath: '$(Pipeline.Workspace)'

          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure-devops-demo'
              appType: 'webApp'
              WebAppName: 'web-app-prod'
              packageForLinux: '$(Pipeline.Workspace)/**/*.zip'

          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: 'Azure-devops-demo'
              Action: 'Swap Slots'
              WebAppName: 'web-app-prod'
              ResourceGroupName: 'devops-demo-rg'
              SourceSlot: 'web-app-stage'